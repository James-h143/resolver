/*------------------------------------------------------------------
dependencies: readline-sync; 

------------------------------------------------------------------*/


function sleep(millis) {
	var slp = require('sleep');
	slp.msleep(millis);
}

function getPathTo(string){
	var aString = string.split("/");
	var sNewString = "";
	for(i=0;i<aString.length-1;i++){
		sNewString += aString[i]+"/";
	}
	return sNewString;
}

function prompt(str){
	var readlineSync = require('readline-sync');
	var sAnswer = readlineSync.question(str+": ");
	return sAnswer;
}

function askQuestions(oSession){
	oSession.sPrimaryDNS = prompt("Enter primary DNS Server IP address");
	oSession.sSecondaryDNS = prompt("Enter secondary DNS Server IP address")
}

function writeConf(oFs,sConfName,sConfContents){
	console.log("writing:" +sConfName+"\nwith: \n"+sConfContents)
	var sConfFullName = sConfName;
	oFs.writeFileSync(sConfFullName, sConfContents)/*, function(err) {
		if(err) {
			return console.log(err);
		}
	});*/
}

function CreateConf(oFs,oSession) {
	var sConfName = oSession.sUserName+".conf";
	console.log("First Run Detected")
	askQuestions(oSession);
	var sConfContents = "PrimaryDNS: "+oSession.sPrimaryDNS+"\n"+"SecondaryDNS: "+oSession.sSecondaryDNS;
	writeConf(oFs,oSession.sConfFullName,sConfContents);
}

function ParseContents(sConfContents,oSession,delimiter,parsing){
	var aConfContents = sConfContents.split("\n")
	var aReturnValue = [];
	for(i=0;i<aConfContents.length;i++){
		var aCurrentLine = aConfContents[i].split(delimiter)
		if(parsing == 0){
			if(aCurrentLine[0].indexOf("PrimaryDNS")>-1){
				oSession.sPrimaryDNS = aCurrentLine[1];
			}else if(aCurrentLine[0].indexOf("SecondaryDNS")>-1){
				oSession.sSecondaryDNS = aCurrentLine[1];
			}
		} else if (parsing == 1 && i>0 && i<3){
			aReturnValue.push(aCurrentLine[1]);
		}
	}
	if (parsing == 1){return aReturnValue}
}

function ReadResolverConf(oFs,oSession) {
	sConfContents = oFs.readFileSync(oSession.sConfFullName,'utf8');
	ParseContents(sConfContents,oSession,": ",0);
}

function ScanDir(oFs,oSession){
	var oOs = require("os");
	oSession.sScriptDir = getPathTo(process.argv[1]);
	oSession.sUserName = oOs.userInfo().username;
	var sConfsFolderLoc = oSession.sScriptDir+"confs/"
	oSession.sConfFullName = sConfsFolderLoc+oSession.sUserName+".conf"
	if(oFs.existsSync(oSession.sConfFullName)){
		ReadResolverConf(oFs,oSession)
	}else{
		CreateConf(oFs,oSession)
	}
}

function CheckForArrayMatch(LookFor,InArray){
	var numberMatches = 0 
	for(i=0;i<InArray.length;i++){
		if(LookFor == InArray[i]){
			numberMatches++
		}
	}
	
	if(numberMatches != InArray.length-1){
		return false
	}else {
		return true
	}
	
}

function readResolvConf(oFs,oSession){
	if(oFs.existsSync(oSession.sResolvConf)){
		sConfContents = oFs.readFileSync(oSession.sResolvConf,'utf8');
		aReturnedValue = ParseContents(sConfContents,oSession," ",1);
		bPrimaryDNSMatch = CheckForArrayMatch(oSession.sPrimaryDNS, aReturnedValue);
		bSecondaryDNSMatch = CheckForArrayMatch(oSession.sSecondaryDNS, aReturnedValue);
		if(bPrimaryDNSMatch != true || bSecondaryDNSMatch != true){
			return false;
		} else{
			return true;
		}
	}else{return false;}
}

function updateResolvConf(oFs, oSession){
	var bResolvConfMatches = readResolvConf(oFs, oSession);
	var sConfContents = "#Generated by Resolver via node.js" + "\n" + "nameserver " + oSession.sPrimaryDNS + "\n" + "nameserver " + oSession.sSecondaryDNS + "\n";
	if(bResolvConfMatches == false){
		if(oFs.existsSync(oSession.sResolvConf)){
			oFs.unlinkSync(oSession.sResolvConf);
		}
		writeConf(oFs,oSession.sResolvConf,sConfContents);
	}
}

function DisplayErrors(oFs,oSession,aErrors){
	if(aErrors.length>0){
		console.log("Aborting script for following reason(s):\n")
		for(i=0;i<aErrors.length;i++){
			console.log(aErrors[i])
		}
		process.exit();
	}

}

function RunChecks(oFs,oSession){
	var aErrors = [];
	if(oSession.sUserName != "root"){
		aErrors.push("resolver must be run as root. Try 'sudo node /path/to/resolver'")
		aErrors.push("Test Error 1")
		aErrors.push("Test Error 2")
	}
	DisplayErrors(oFs,oSession,aErrors)
}

function main(oSession){
	if(oSession.bRun == true){
		var oFs = require('fs');
		ScanDir(oFs,oSession);
		if(oSession.iCycle == 0){
			console.log("Program Running");
			RunChecks(oFs,oSession);
			oSession.iCycle++;
		}
		updateResolvConf(oFs,oSession);
		sleep(oSession.iRefreshTimeSecs*1000); //TO DO: Figure why npm sleep wont install and use that
		main(oSession);
	}
}

function session(){
	this.bRun = true;
	this.iRefreshTimeSecs = 10;
	this.sUserName = undefined; 
	this.sScriptDir = undefined;
	this.sResolvConf = "/etc/resolv.conf"
	this.sPrimaryDNS = undefined;
	this.sSecondaryDNS = undefined;
	this.sConfFullName = undefined;
	this.iCycle = 0
}

var oSession = new session();
main(oSession);
